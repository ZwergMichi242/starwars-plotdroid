{"version":3,"sources":["Assets/images/droid.png","Components/ModalTest.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModalExample","props","buttonLabel","className","useState","modal","setModal","nestedModal","setNestedModal","nestedModal1","setNestedModal1","closeAll","setCloseAll","toggle","toggleNested","toggleNested1","toggleAll","Button","color","onClick","Modal","isOpen","ModalHeader","ModalBody","onClosed","undefined","ModalFooter","droidImg","minWidth","maxWidth","minHeight","maxHeight","App","Jumbotron","fluid","Container","Media","left","style","object","src","droid","alt","right","PopoverHeader","PopoverBody","ModalTest","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44e02245.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/droid.a9df3614.png\";","import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst ModalExample = (props) => {\n  const {\n    buttonLabel,\n    className\n  } = props;\n\n  const [modal, setModal] = useState(false);\n  const [nestedModal, setNestedModal] = useState(false);\n  const [nestedModal1, setNestedModal1] = useState(false);\n  const [closeAll, setCloseAll] = useState(false);\n\n  const toggle = () => setModal(!modal);\n  const toggleNested = () => {\n    setNestedModal(!nestedModal);\n    setCloseAll(false);\n  }\n  const toggleNested1 = () => {\n    setNestedModal1(!nestedModal1);\n    setCloseAll(false);\n  }\n  const toggleAll = () => {\n    setNestedModal(!nestedModal);\n    setCloseAll(true);\n  }\n\n  return (\n    <div>\n      <Button color=\"danger\" onClick={toggle}>Feed the Droid!</Button>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n        <ModalBody>\n          <hr/>\n          <h1>This is H1 O</h1>\n          <h2>This is H2</h2>\n          <h3>This is H3</h3>\n          <h4>This is H4</h4>\n          <h5>This is H5</h5>\n          <h6>This is H6</h6>\n\n          <br />\n          <Button color=\"success\" onClick={toggleNested}>Show Nested Modal</Button>\n              <Modal isOpen={nestedModal} toggle={toggleNested} onClosed={closeAll ? toggle : undefined}>\n                <ModalHeader toggle={toggleAll}>Nested Modal title</ModalHeader>\n                <ModalBody>\n                <hr/>\n                <h6>This will be the subtitles</h6>\n                  <p>Here will be the plot or so</p>\n                <br />\n                <Button color=\"success\" onClick={toggleNested1}>Show Nested Modal1</Button>\n                <Modal isOpen={nestedModal1} toggle={toggleNested1} onClosed={closeAll ? toggle : undefined}>\n                  <ModalHeader toggle={toggleAll}>Second nested</ModalHeader>\n                  <ModalBody>\n                    <hr/>\n                      Second Modals body\n                    <br />\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button color=\"primary\" onClick={toggleAll}>Do Something</Button>{' '}\n                    <Button color=\"secondary\" onClick={toggleAll}>Cancel</Button>\n                  </ModalFooter>\n                </Modal>\n                </ModalBody>\n                <ModalFooter>\n                  <Button color=\"primary\" onClick={toggleAll}>Done</Button>{' '}\n                  <Button color=\"secondary\" onClick={toggleAll}>All Done</Button>\n                </ModalFooter>\n              </Modal>\n          </ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={toggleAll}>Done</Button>{' '}\n          <Button color=\"secondary\" onClick={toggleAll}>All Done</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n\nexport default ModalExample;\n","import React, { Component } from 'react';\nimport { Jumbotron, Container, Media, Popover, PopoverHeader, PopoverBody, Button } from 'reactstrap';\nimport droid from './Assets/images/droid.png';\nimport './App.scss';\nimport ModalTest from './Components/ModalTest';\n\nvar droidImg = {\n  minWidth: \"60%\",\n  maxWidth: \"100%\",\n  minHeight: \"60%\",\n  maxHeight: \"100%\",\n};\n\nclass App extends Component {\n\n render () {\n    return(\n      <Jumbotron fluid>\n        <Container fluid>\n          <h1 color=\"primary\">STAR WARS</h1>\n          <h1>Plot-Droid</h1>\n          <hr/>\n          <h6>Create your own fantastic Starwars Story with this cute littel Plot-Droid</h6>\n        </Container>\n        <Container className=\"droid\">\n          <Media>\n            <Media left>\n              <Media style={droidImg} object src={droid} alt=\"\"/>\n            </Media>\n            <Media right>\n            <PopoverHeader color=\"primary\">Popover Title</PopoverHeader>\n              <PopoverBody color=\"yellow\">\n                <ModalTest />\n              </PopoverBody>\n            </Media>\n          </Media>\n        </Container>\n      </Jumbotron>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}